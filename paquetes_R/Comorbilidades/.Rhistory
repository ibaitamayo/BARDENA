<<<<<<< HEAD
(-4) + wloss * 6 + fed * 5 + blane * (-2) + dane *
(-2) + alcohol * 0 + drug * (-7) + psycho * 0 + depre *
(-3))
pps$windex_ahrq <- with(pps, cut(wscore_ahrq, breaks = c(-Inf,
0, 1, 4.5, Inf), labels = c("<0", "0",
"1-4", ">=5"), right = FALSE))
pps$windex_vw <- with(pps, cut(wscore_hxvw, breaks = c(-Inf,
0, 1, 4.5, Inf), labels = c("<0", "0",
"1-4", ">=5"), right = FALSE))
ppf%>%left_join(pps%>%dplyr::select(id,score_ch,index_ch,wscore_ch,windex_ch,score_hx,index_hx,wscore_ahrq,wscore_hxvw,windex_vw),by="id")->ppf
if(any(allpeople%in%ppf$id==FALSE)){
data.frame(matrix(data = NA,nrow = length(allpeople[allpeople%in%ppf$id==FALSE]),ncol=dim(ppf)[2]))->fillpatient
colnames(fillpatient)<-colnames(ppf)
fillpatient$id<-allpeople[allpeople%in%ppf$id==FALSE]
rbind(ppf,fillpatient)->ppf
}
return(ppf)
}
comorb(example)
comorb()
#' @name comorb
#'
#' @param archivo. Archivo refers to the location of the csv file that needs 3 columns. pacUnifCOde (patient identifier),Diag_Cod(ICD9 or ICD10 of the pathology),ResDGP_Fecha_Presta(date of the comorbidity).
#' @param mini. This numeric parameters  defines the number of rows from the "archivo" that the package should be passed on.
#' @return modified version of comorbidity to use  ICD9 , ICD10 and CIAP2 to return Charlson score, elixhauser score and first event date.
#'
#' @examples comorb()
#'
#' @export
#'
comorb<-function(archivo=NULL,id="Pac_Unif_Cod",code="Diag_Cod", fecha="ResDiag_Inicio_Fecha",assign0 = TRUE,mini=NULL) {
require(dplyr)
require(readr)
require(data.table)
require(stringr)
require(DT)
require(lubridate)
require(tools)
if(is.null(archivo)){
data(example)
tabla<-example
}else if(is.data.frame(archivo)){
tabla<-archivo
}else if(tools::file_ext(archivo)=="txt"){
tabla<-read_delim(archivo,
";", escape_double = FALSE,col_names = TRUE,
locale = locale(encoding = "ISO-8859-1"),col_types = cols(X1 = col_double(),X2 = col_character(),X3 = col_character(),X4 = col_character()),
trim_ws = TRUE)
}
# else if(tools::file_ext(archivo)=="csv"){
#   tabla<-read_delim(archivo,
#                     ";", escape_double = FALSE, col_types = cols(ResDiag_Inicio_Fecha= col_character()),
#                     locale = locale(encoding = "ISO-8859-1"),
#                     trim_ws = TRUE)
#   colnames(tabla)<-c(id,code,"type",fecha)
#
#
# }
if(is.null(mini)==FALSE){
tabla<-head(tabla,mini)
}
colnames(tabla)<-c(id,code,"type",fecha)
tabla <- tabla %>%mutate(ResDiag_Inicio_Fecha=lubridate::ymd(str_trunc(ResDiag_Inicio_Fecha,width = 10,ellipsis = "")))
tabla%>%distinct(Pac_Unif_Cod)->allpeople
allpeople$Pac_Unif_Cod->allpeople
tabla <- tabla %>% dplyr::mutate(Diag_Cod=gsub("\\.","",Diag_Cod))%>%filter(strtrim(Diag_Cod,3)%in%allstrimcod)#corto a 3 digitos y lo comparo con los eventos cortados a 3 digitos,x velocidad
tabla<-tabla%>%mutate(Diag_Cod=ifelse(str_starts(string=tolower(type),pattern = "(ciap)"),paste0("_",Diag_Cod),Diag_Cod))%>%filter(is.na(Pac_Unif_Cod)==FALSE)#esto es lo que he añadido para que lea los ciap2
tabla<-tabla%>%dplyr::select(id,code,fecha)
colnames(tabla)<-c("id","code","fecha")
### 1. construye in identificador compuesto de id.fecha.codecie ####
tabla_ <- tabla %>% dplyr::mutate(idfechacod=paste(as.character(id),as.character(fecha),code, sep=",")) %>% relocate(idfechacod, .before=id)  %>% dplyr::select(-c(id,fecha)) %>% setDT()
## 2. se generan las diversas comorbilidades empleando los codigos del objeto tricod ####
for(i in seq(1,length(tricod))) {
dc=tricod[[i]]
varname=names(tricod)[i]
tabla_ <- tabla_ %>% mutate(!!varname:=as.numeric(str_detect(code,dc)))
}
mpp=data.table::melt(tabla_, id.vars = "idfechacod",measure.vars = names(tabla_)[3:45])
mpp=mpp[value!=0]  ## eliminar registros con codigos no incluidos
mpp[, c("id","fecha","code"):=tstrsplit(idfechacod, "," , fixed=TRUE)]
mpp=mpp[, -"idfechacod"]
## S1 17g+score generar el fichero previo (a falta del cálculo de pesos) de la S1
ppf=dcast.data.table(
mpp, id ~ variable,
value.var = 'fecha',
fun = list(min))
if(any(names(tricod)%in%colnames(ppf)==FALSE)){
colvacias<-data.frame(matrix(data=NA,nrow = dim(ppf)[1],ncol=sum((as.numeric(names(tricod)%in%colnames(ppf)-1)^2))))
colnames(colvacias)<-names(tricod)[names(tricod)%in%colnames(ppf)==FALSE]
cbind(ppf,colvacias)->ppf
}
pps<- ppf %>% mutate(across(names(tricod),function(x){x=ifelse(is.na(x),0,1)}))
data.table::setDF(pps)
pps$score_ch <- with(pps, ami + chf + pvd + cevd + dementia +
copd + rheumd_ch + pud_ch + mld * ifelse(msld == 1 & assign0,
0, 1) + diabwoc * ifelse(diabwic == 1 & assign0, 0, 1) +
diabwic + hp + rend + canc * ifelse(metacanc == 1 &
assign0, 0, 1) + msld + metacanc + aids)
pps$index_ch <- with(pps, cut(score_ch, breaks = c(0, 1, 2.5, 4.5,
Inf), labels = c("0", "1-2", "3-4",
">=5"), right = FALSE))
pps$wscore_ch <- with(pps, ami + chf + pvd + cevd + dementia +
copd + rheumd_ch + pud_ch + mld * ifelse(msld == 1 & assign0,
0, 1) + diabwoc * ifelse(diabwic == 1 & assign0, 0, 1) +
diabwic * 2 + hp * 2 + rend * 2 + canc * ifelse(metacanc ==
1 & assign0, 0, 2) + msld * 3 + metacanc * 6 + aids *
6)
pps$windex_ch <- with(pps, cut(wscore_ch, breaks = c(0, 1, 2.5,
4.5, Inf), labels = c("0", "1-2", "3-4",
">=5"), right = FALSE))
pps$score_hx <- with(pps, chf + carit + valv + pcd + pvd + hypunc *
ifelse(hypc == 1 & assign0, 0, 1) + hypc + para +
ond + copd + diabunc * ifelse(diabc == 1 & assign0,
0, 1) + diabc + hypothy + rf + ld + pud_hx + aids +
lymph + metacanc + solidtum * ifelse(metacanc ==
1 & assign0, 0, 1) + rheumd_hx + coag + obes + wloss +
fed + blane + dane + alcohol + drug + psycho + depre)
pps$index_hx <- with(pps, cut(score_hx, breaks = c(-Inf, 0, 1,
4.5, Inf), labels = c("<0", "0", "1-4",
">=5"), right = FALSE))
pps$wscore_ahrq <- with(pps, chf * 9 + carit * 0 + valv *
0 + pcd * 6 + pvd * 3 + ifelse(hypunc == 1 | hypc ==
1, 1, 0) * (-1) + para * 5 + ond * 5 + copd * 3 +
diabunc * ifelse(diabc == 1 & assign0, 0, 0) + diabc *
(-3) + hypothy * 0 + rf * 6 + ld * 4 + pud_hx * 0 +
aids * 0 + lymph * 6 + metacanc * 14 + solidtum *
ifelse(metacanc == 1 & assign0, 0, 7) + rheumd_hx *
0 + coag * 11 + obes * (-5) + wloss * 9 + fed * 11 +
blane * (-3) + dane * (-2) + alcohol * (-1) + drug *
(-7) + psycho * (-5) + depre * (-5))
pps$wscore_hxvw <- with(pps, chf * 7 + carit * 5 + valv * (-1) +
pcd * 4 + pvd * 2 + ifelse(hypunc == 1 | hypc ==
1, 1, 0) * 0 + para * 7 + ond * 6 + copd * 3 + diabunc *
ifelse(diabc == 1 & assign0, 0, 0) + diabc * 0 +
hypothy * 0 + rf * 5 + ld * 11 + pud_hx * 0 + aids *
0 + lymph * 9 + metacanc * 12 + solidtum * ifelse(metacanc ==
1 & assign0, 0, 4) + rheumd_hx * 0 + coag * 3 + obes *
(-4) + wloss * 6 + fed * 5 + blane * (-2) + dane *
(-2) + alcohol * 0 + drug * (-7) + psycho * 0 + depre *
(-3))
pps$windex_ahrq <- with(pps, cut(wscore_ahrq, breaks = c(-Inf,
0, 1, 4.5, Inf), labels = c("<0", "0",
"1-4", ">=5"), right = FALSE))
pps$windex_vw <- with(pps, cut(wscore_hxvw, breaks = c(-Inf,
0, 1, 4.5, Inf), labels = c("<0", "0",
"1-4", ">=5"), right = FALSE))
ppf%>%left_join(pps%>%dplyr::select(id,score_ch,index_ch,wscore_ch,windex_ch,score_hx,index_hx,wscore_ahrq,wscore_hxvw,windex_vw),by="id")->ppf
if(any(allpeople%in%ppf$id==FALSE)){
data.frame(matrix(data = NA,nrow = length(allpeople[allpeople%in%ppf$id==FALSE]),ncol=dim(ppf)[2]))->fillpatient
colnames(fillpatient)<-colnames(ppf)
fillpatient$id<-allpeople[allpeople%in%ppf$id==FALSE]
rbind(ppf,fillpatient)->ppf
}
return(ppf)
}
comorb()
comorb()
load(example)
#' @name comorb
#'
#' @param archivo. Archivo refers to the location of the csv file that needs 3 columns. pacUnifCOde (patient identifier),Diag_Cod(ICD9 or ICD10 of the pathology),ResDGP_Fecha_Presta(date of the comorbidity).
#' @param mini. This numeric parameters  defines the number of rows from the "archivo" that the package should be passed on.
#' @return modified version of comorbidity to use  ICD9 , ICD10 and CIAP2 to return Charlson score, elixhauser score and first event date.
#'
#' @examples data(example) comorb(archivo=example)
#'
#' @export
#'
comorb<-function(archivo=example,id="Pac_Unif_Cod",code="Diag_Cod", fecha="ResDiag_Inicio_Fecha",assign0 = TRUE,mini=NULL) {
require(dplyr)
require(readr)
require(data.table)
require(stringr)
require(DT)
require(lubridate)
require(tools)
if(is.data.frame(archivo)){
tabla<-archivo
}else if(tools::file_ext(archivo)=="txt"){
tabla<-read_delim(archivo,
";", escape_double = FALSE,col_names = TRUE,
locale = locale(encoding = "ISO-8859-1"),col_types = cols(X1 = col_double(),X2 = col_character(),X3 = col_character(),X4 = col_character()),
trim_ws = TRUE)
}
# else if(tools::file_ext(archivo)=="csv"){
#   tabla<-read_delim(archivo,
#                     ";", escape_double = FALSE, col_types = cols(ResDiag_Inicio_Fecha= col_character()),
#                     locale = locale(encoding = "ISO-8859-1"),
#                     trim_ws = TRUE)
#   colnames(tabla)<-c(id,code,"type",fecha)
#
#
# }
if(is.null(mini)==FALSE){
tabla<-head(tabla,mini)
}
colnames(tabla)<-c(id,code,"type",fecha)
tabla <- tabla %>%mutate(ResDiag_Inicio_Fecha=lubridate::ymd(str_trunc(ResDiag_Inicio_Fecha,width = 10,ellipsis = "")))
tabla%>%distinct(Pac_Unif_Cod)->allpeople
allpeople$Pac_Unif_Cod->allpeople
tabla <- tabla %>% dplyr::mutate(Diag_Cod=gsub("\\.","",Diag_Cod))%>%filter(strtrim(Diag_Cod,3)%in%allstrimcod)#corto a 3 digitos y lo comparo con los eventos cortados a 3 digitos,x velocidad
tabla<-tabla%>%mutate(Diag_Cod=ifelse(str_starts(string=tolower(type),pattern = "(ciap)"),paste0("_",Diag_Cod),Diag_Cod))%>%filter(is.na(Pac_Unif_Cod)==FALSE)#esto es lo que he añadido para que lea los ciap2
tabla<-tabla%>%dplyr::select(id,code,fecha)
colnames(tabla)<-c("id","code","fecha")
### 1. construye in identificador compuesto de id.fecha.codecie ####
tabla_ <- tabla %>% dplyr::mutate(idfechacod=paste(as.character(id),as.character(fecha),code, sep=",")) %>% relocate(idfechacod, .before=id)  %>% dplyr::select(-c(id,fecha)) %>% setDT()
## 2. se generan las diversas comorbilidades empleando los codigos del objeto tricod ####
for(i in seq(1,length(tricod))) {
dc=tricod[[i]]
varname=names(tricod)[i]
tabla_ <- tabla_ %>% mutate(!!varname:=as.numeric(str_detect(code,dc)))
}
mpp=data.table::melt(tabla_, id.vars = "idfechacod",measure.vars = names(tabla_)[3:45])
mpp=mpp[value!=0]  ## eliminar registros con codigos no incluidos
mpp[, c("id","fecha","code"):=tstrsplit(idfechacod, "," , fixed=TRUE)]
mpp=mpp[, -"idfechacod"]
## S1 17g+score generar el fichero previo (a falta del cálculo de pesos) de la S1
ppf=dcast.data.table(
mpp, id ~ variable,
value.var = 'fecha',
fun = list(min))
if(any(names(tricod)%in%colnames(ppf)==FALSE)){
colvacias<-data.frame(matrix(data=NA,nrow = dim(ppf)[1],ncol=sum((as.numeric(names(tricod)%in%colnames(ppf)-1)^2))))
colnames(colvacias)<-names(tricod)[names(tricod)%in%colnames(ppf)==FALSE]
cbind(ppf,colvacias)->ppf
}
pps<- ppf %>% mutate(across(names(tricod),function(x){x=ifelse(is.na(x),0,1)}))
data.table::setDF(pps)
pps$score_ch <- with(pps, ami + chf + pvd + cevd + dementia +
copd + rheumd_ch + pud_ch + mld * ifelse(msld == 1 & assign0,
0, 1) + diabwoc * ifelse(diabwic == 1 & assign0, 0, 1) +
diabwic + hp + rend + canc * ifelse(metacanc == 1 &
assign0, 0, 1) + msld + metacanc + aids)
pps$index_ch <- with(pps, cut(score_ch, breaks = c(0, 1, 2.5, 4.5,
Inf), labels = c("0", "1-2", "3-4",
">=5"), right = FALSE))
pps$wscore_ch <- with(pps, ami + chf + pvd + cevd + dementia +
copd + rheumd_ch + pud_ch + mld * ifelse(msld == 1 & assign0,
0, 1) + diabwoc * ifelse(diabwic == 1 & assign0, 0, 1) +
diabwic * 2 + hp * 2 + rend * 2 + canc * ifelse(metacanc ==
1 & assign0, 0, 2) + msld * 3 + metacanc * 6 + aids *
6)
pps$windex_ch <- with(pps, cut(wscore_ch, breaks = c(0, 1, 2.5,
4.5, Inf), labels = c("0", "1-2", "3-4",
">=5"), right = FALSE))
pps$score_hx <- with(pps, chf + carit + valv + pcd + pvd + hypunc *
ifelse(hypc == 1 & assign0, 0, 1) + hypc + para +
ond + copd + diabunc * ifelse(diabc == 1 & assign0,
0, 1) + diabc + hypothy + rf + ld + pud_hx + aids +
lymph + metacanc + solidtum * ifelse(metacanc ==
1 & assign0, 0, 1) + rheumd_hx + coag + obes + wloss +
fed + blane + dane + alcohol + drug + psycho + depre)
pps$index_hx <- with(pps, cut(score_hx, breaks = c(-Inf, 0, 1,
4.5, Inf), labels = c("<0", "0", "1-4",
">=5"), right = FALSE))
pps$wscore_ahrq <- with(pps, chf * 9 + carit * 0 + valv *
0 + pcd * 6 + pvd * 3 + ifelse(hypunc == 1 | hypc ==
1, 1, 0) * (-1) + para * 5 + ond * 5 + copd * 3 +
diabunc * ifelse(diabc == 1 & assign0, 0, 0) + diabc *
(-3) + hypothy * 0 + rf * 6 + ld * 4 + pud_hx * 0 +
aids * 0 + lymph * 6 + metacanc * 14 + solidtum *
ifelse(metacanc == 1 & assign0, 0, 7) + rheumd_hx *
0 + coag * 11 + obes * (-5) + wloss * 9 + fed * 11 +
blane * (-3) + dane * (-2) + alcohol * (-1) + drug *
(-7) + psycho * (-5) + depre * (-5))
pps$wscore_hxvw <- with(pps, chf * 7 + carit * 5 + valv * (-1) +
pcd * 4 + pvd * 2 + ifelse(hypunc == 1 | hypc ==
1, 1, 0) * 0 + para * 7 + ond * 6 + copd * 3 + diabunc *
ifelse(diabc == 1 & assign0, 0, 0) + diabc * 0 +
hypothy * 0 + rf * 5 + ld * 11 + pud_hx * 0 + aids *
0 + lymph * 9 + metacanc * 12 + solidtum * ifelse(metacanc ==
1 & assign0, 0, 4) + rheumd_hx * 0 + coag * 3 + obes *
(-4) + wloss * 6 + fed * 5 + blane * (-2) + dane *
(-2) + alcohol * 0 + drug * (-7) + psycho * 0 + depre *
(-3))
pps$windex_ahrq <- with(pps, cut(wscore_ahrq, breaks = c(-Inf,
0, 1, 4.5, Inf), labels = c("<0", "0",
"1-4", ">=5"), right = FALSE))
pps$windex_vw <- with(pps, cut(wscore_hxvw, breaks = c(-Inf,
0, 1, 4.5, Inf), labels = c("<0", "0",
"1-4", ">=5"), right = FALSE))
ppf%>%left_join(pps%>%dplyr::select(id,score_ch,index_ch,wscore_ch,windex_ch,score_hx,index_hx,wscore_ahrq,wscore_hxvw,windex_vw),by="id")->ppf
if(any(allpeople%in%ppf$id==FALSE)){
data.frame(matrix(data = NA,nrow = length(allpeople[allpeople%in%ppf$id==FALSE]),ncol=dim(ppf)[2]))->fillpatient
colnames(fillpatient)<-colnames(ppf)
fillpatient$id<-allpeople[allpeople%in%ppf$id==FALSE]
rbind(ppf,fillpatient)->ppf
}
return(ppf)
}
comorb(example)
data(example)
comorb(example)
load("F:/Navarrabiomed/Methodology/Github/BARDENA/paquetes_R/Comorbilidades/data/allstrimcod.rda")
load("F:/Navarrabiomed/Methodology/Github/BARDENA/paquetes_R/Comorbilidades/data/tricod.rda")
devtools::use_data(allstrimcod,tricod,internal = TRUE)
library(devtools)
usethis::use_data(allstrimcod,tricod,internal = TRUE)
load("F:/Navarrabiomed/Methodology/Github/BARDENA/paquetes_R/Comorbilidades/data/example.rda")
View(example)
#' modified version of comorbidity to work simultaneously with icd9 and icd10, and Smoking group extraction
#'
#' @name comorb
#'
#' @param archivo. Archivo refers to the location of the csv file that needs 3 columns. pacUnifCOde (patient identifier),Diag_Cod(ICD9 or ICD10 of the pathology),ResDGP_Fecha_Presta(date of the comorbidity).
#' @param mini. This numeric parameters  defines the number of rows from the "archivo" that the package should be passed on.
#' @return modified version of comorbidity to use  ICD9 , ICD10 and CIAP2 to return Charlson score, elixhauser score and first event date.
#'
#' @export
#'
comorb<-function(archivo=example,id="Pac_Unif_Cod",code="Diag_Cod", fecha="ResDiag_Inicio_Fecha",assign0 = TRUE,mini=NULL) {
require(dplyr)
require(readr)
require(data.table)
require(stringr)
require(DT)
require(lubridate)
require(tools)
if(is.data.frame(archivo)){
tabla<-archivo
}else if(tools::file_ext(archivo)=="txt"){
tabla<-read_delim(archivo,
";", escape_double = FALSE,col_names = TRUE,
locale = locale(encoding = "ISO-8859-1"),col_types = cols(X1 = col_double(),X2 = col_character(),X3 = col_character(),X4 = col_character()),
trim_ws = TRUE)
}
# else if(tools::file_ext(archivo)=="csv"){
#   tabla<-read_delim(archivo,
#                     ";", escape_double = FALSE, col_types = cols(ResDiag_Inicio_Fecha= col_character()),
#                     locale = locale(encoding = "ISO-8859-1"),
#                     trim_ws = TRUE)
#   colnames(tabla)<-c(id,code,"type",fecha)
#
#
# }
if(is.null(mini)==FALSE){
tabla<-head(tabla,mini)
}
colnames(tabla)<-c(id,code,"type",fecha)
tabla <- tabla %>%mutate(ResDiag_Inicio_Fecha=lubridate::ymd(str_trunc(ResDiag_Inicio_Fecha,width = 10,ellipsis = "")))
tabla%>%distinct(Pac_Unif_Cod)->allpeople
allpeople$Pac_Unif_Cod->allpeople
tabla <- tabla %>% dplyr::mutate(Diag_Cod=gsub("\\.","",Diag_Cod))%>%filter(strtrim(Diag_Cod,3)%in%allstrimcod)#corto a 3 digitos y lo comparo con los eventos cortados a 3 digitos,x velocidad
tabla<-tabla%>%mutate(Diag_Cod=ifelse(str_starts(string=tolower(type),pattern = "(ciap)"),paste0("_",Diag_Cod),Diag_Cod))%>%filter(is.na(Pac_Unif_Cod)==FALSE)#esto es lo que he añadido para que lea los ciap2
tabla<-tabla%>%dplyr::select(id,code,fecha)
colnames(tabla)<-c("id","code","fecha")
### 1. construye in identificador compuesto de id.fecha.codecie ####
tabla_ <- tabla %>% dplyr::mutate(idfechacod=paste(as.character(id),as.character(fecha),code, sep=",")) %>% relocate(idfechacod, .before=id)  %>% dplyr::select(-c(id,fecha)) %>% setDT()
## 2. se generan las diversas comorbilidades empleando los codigos del objeto tricod ####
for(i in seq(1,length(tricod))) {
dc=tricod[[i]]
varname=names(tricod)[i]
tabla_ <- tabla_ %>% mutate(!!varname:=as.numeric(str_detect(code,dc)))
}
mpp=data.table::melt(tabla_, id.vars = "idfechacod",measure.vars = names(tabla_)[3:45])
mpp=mpp[value!=0]  ## eliminar registros con codigos no incluidos
mpp[, c("id","fecha","code"):=tstrsplit(idfechacod, "," , fixed=TRUE)]
mpp=mpp[, -"idfechacod"]
## S1 17g+score generar el fichero previo (a falta del cálculo de pesos) de la S1
ppf=dcast.data.table(
mpp, id ~ variable,
value.var = 'fecha',
fun = list(min))
if(any(names(tricod)%in%colnames(ppf)==FALSE)){
colvacias<-data.frame(matrix(data=NA,nrow = dim(ppf)[1],ncol=sum((as.numeric(names(tricod)%in%colnames(ppf)-1)^2))))
colnames(colvacias)<-names(tricod)[names(tricod)%in%colnames(ppf)==FALSE]
cbind(ppf,colvacias)->ppf
}
pps<- ppf %>% mutate(across(names(tricod),function(x){x=ifelse(is.na(x),0,1)}))
data.table::setDF(pps)
pps$score_ch <- with(pps, ami + chf + pvd + cevd + dementia +
copd + rheumd_ch + pud_ch + mld * ifelse(msld == 1 & assign0,
0, 1) + diabwoc * ifelse(diabwic == 1 & assign0, 0, 1) +
diabwic + hp + rend + canc * ifelse(metacanc == 1 &
assign0, 0, 1) + msld + metacanc + aids)
pps$index_ch <- with(pps, cut(score_ch, breaks = c(0, 1, 2.5, 4.5,
Inf), labels = c("0", "1-2", "3-4",
">=5"), right = FALSE))
pps$wscore_ch <- with(pps, ami + chf + pvd + cevd + dementia +
copd + rheumd_ch + pud_ch + mld * ifelse(msld == 1 & assign0,
0, 1) + diabwoc * ifelse(diabwic == 1 & assign0, 0, 1) +
diabwic * 2 + hp * 2 + rend * 2 + canc * ifelse(metacanc ==
1 & assign0, 0, 2) + msld * 3 + metacanc * 6 + aids *
6)
pps$windex_ch <- with(pps, cut(wscore_ch, breaks = c(0, 1, 2.5,
4.5, Inf), labels = c("0", "1-2", "3-4",
">=5"), right = FALSE))
pps$score_hx <- with(pps, chf + carit + valv + pcd + pvd + hypunc *
ifelse(hypc == 1 & assign0, 0, 1) + hypc + para +
ond + copd + diabunc * ifelse(diabc == 1 & assign0,
0, 1) + diabc + hypothy + rf + ld + pud_hx + aids +
lymph + metacanc + solidtum * ifelse(metacanc ==
1 & assign0, 0, 1) + rheumd_hx + coag + obes + wloss +
fed + blane + dane + alcohol + drug + psycho + depre)
pps$index_hx <- with(pps, cut(score_hx, breaks = c(-Inf, 0, 1,
4.5, Inf), labels = c("<0", "0", "1-4",
">=5"), right = FALSE))
pps$wscore_ahrq <- with(pps, chf * 9 + carit * 0 + valv *
0 + pcd * 6 + pvd * 3 + ifelse(hypunc == 1 | hypc ==
1, 1, 0) * (-1) + para * 5 + ond * 5 + copd * 3 +
diabunc * ifelse(diabc == 1 & assign0, 0, 0) + diabc *
(-3) + hypothy * 0 + rf * 6 + ld * 4 + pud_hx * 0 +
aids * 0 + lymph * 6 + metacanc * 14 + solidtum *
ifelse(metacanc == 1 & assign0, 0, 7) + rheumd_hx *
0 + coag * 11 + obes * (-5) + wloss * 9 + fed * 11 +
blane * (-3) + dane * (-2) + alcohol * (-1) + drug *
(-7) + psycho * (-5) + depre * (-5))
pps$wscore_hxvw <- with(pps, chf * 7 + carit * 5 + valv * (-1) +
pcd * 4 + pvd * 2 + ifelse(hypunc == 1 | hypc ==
1, 1, 0) * 0 + para * 7 + ond * 6 + copd * 3 + diabunc *
ifelse(diabc == 1 & assign0, 0, 0) + diabc * 0 +
hypothy * 0 + rf * 5 + ld * 11 + pud_hx * 0 + aids *
0 + lymph * 9 + metacanc * 12 + solidtum * ifelse(metacanc ==
1 & assign0, 0, 4) + rheumd_hx * 0 + coag * 3 + obes *
(-4) + wloss * 6 + fed * 5 + blane * (-2) + dane *
(-2) + alcohol * 0 + drug * (-7) + psycho * 0 + depre *
(-3))
pps$windex_ahrq <- with(pps, cut(wscore_ahrq, breaks = c(-Inf,
0, 1, 4.5, Inf), labels = c("<0", "0",
"1-4", ">=5"), right = FALSE))
pps$windex_vw <- with(pps, cut(wscore_hxvw, breaks = c(-Inf,
0, 1, 4.5, Inf), labels = c("<0", "0",
"1-4", ">=5"), right = FALSE))
ppf%>%left_join(pps%>%dplyr::select(id,score_ch,index_ch,wscore_ch,windex_ch,score_hx,index_hx,wscore_ahrq,wscore_hxvw,windex_vw),by="id")->ppf
if(any(allpeople%in%ppf$id==FALSE)){
data.frame(matrix(data = NA,nrow = length(allpeople[allpeople%in%ppf$id==FALSE]),ncol=dim(ppf)[2]))->fillpatient
colnames(fillpatient)<-colnames(ppf)
fillpatient$id<-allpeople[allpeople%in%ppf$id==FALSE]
rbind(ppf,fillpatient)->ppf
}
return(ppf)
}
comorb())
comorb()
example
data()
data(data)
data(example)
library(Comorbilidades)
data(example)
comorb(archivo=example)
Q
Q
Q
Q
library(Comorbilidades)
comorb(archivo = example)
library(Comorbilidades)
comorb(archivo = example)
library(Comorbilidades)
comorb(archivo = example)
library(Comorbilidades)
comorb(archivo = example)
rlang::last_error()
rlang::last_trace()
id="Pac_Unif_Cod"
code="Diag_Cod"
type="type"
fecha="ResDiag_Inicio_Fecha"
granularidad = TRUE
mini=NULL
example->tabla
colnames(tabla)<-c(id,code,"type",fecha)
tabla <- tabla %>%mutate(ResDiag_Inicio_Fecha=lubridate::ymd(str_trunc(ResDiag_Inicio_Fecha,width = 10,ellipsis = "")))
tabla%>%distinct(Pac_Unif_Cod)->allpeople
allpeople$Pac_Unif_Cod->allpeople
print("people counted")
tabla <- tabla %>% dplyr::mutate(Diag_Cod=gsub("\\.","",Diag_Cod))%>%filter(strtrim(Diag_Cod,3)%in%Comorbilidades:::allstrimcod)#corto a 3 digitos y lo comparo con los eventos cortados a 3 digitos,x velocidad
tabla<-tabla%>%mutate(Diag_Cod=ifelse(str_starts(string=tolower(type),pattern = "(ciap)"),paste0("_",Diag_Cod),Diag_Cod))%>%filter(is.na(Pac_Unif_Cod)==FALSE)#esto es lo que he añadido para que lea los ciap2
tabla<-tabla%>%dplyr::select(all_of(c(id,code,fecha)))
colnames(tabla)<-c("id","code","fecha")
print("CIAP2 processed")
### 1. construye in identificador compuesto de id.fecha.codecie ####
tabla_ <- tabla %>% dplyr::mutate(idfechacod=paste(as.character(id),as.character(fecha),code, sep=",")) %>% relocate(idfechacod, .before=id)  %>% dplyr::select(-all_of(c("id","fecha"))) %>% setDT()
print("information_joined")
for(i in seq(1,length(Comorbilidades:::tricod))) {
dc=Comorbilidades:::tricod[[i]]
varname=names(Comorbilidades:::tricod)[i]
tabla_ <- tabla_ %>% mutate(!!varname:=as.numeric(str_detect(code,dc)))
}
print("disease matrix generated")
mpp=data.table::melt(tabla_, id.vars = "idfechacod",measure.vars = names(tabla_)[3:45]) %>% setDT()
print("diseases grouped")
# mpp=mpp[value!=0]
mpp=mpp[with(mpp,value!=0),]
print("Fit persons eliminated")
# mpp[, c("id","fecha","code"):=tstrsplit(x=idfechacod, "," , fixed=TRUE)]
# mpp[, c("id","fecha","code"):=tstrsplit(idfechacod, "," , fixed=TRUE,names=TRUE)]## eliminar registros con codigos no incluidos
tidyr::separate_wider_delim(data=mpp,cols="idfechacod",delim=",",names=c("id","fecha","code"),cols_remove = TRUE)->mpp
# mpp=mpp[, -"idfechacod"]
print("disaggregating information")
ppf=pivot_longer(
data=mpp, id ~ variable,
value.var = 'fecha',
fun = list(min))
View(mpp)
View(mpp)
library(Comorbilidades)
comorb(archivo=example)
library(Comorbilidades)
comorb(archivo=example)
remove.packages("Comorbilidades")
library(Comorbilidades)
comorb(archivo=example)
library(Comorbilidades)
comorb(archivo=example)
rlang::last_error()
rlang::last_error()
rlang::last_trace()
library(Comorbilidades)
comorb(archivo=example)
View(comorb(archivo=example))
=======
load("C:/Users/D127022/Documents/GitHub/Code/BARDENA/paquetes_R/Comorbilidades/mapeado.rda")
View(mapeado2)
load("C:/Users/D127022/Documents/GitHub/Code/BARDENA/paquetes_R/Comorbilidades/tricod.rda")
View(tricod)
View(mapeado2)
load("~/GitHub/Code/BARDENA/paquetes_R/Comorbilidades/data/allcod.rda")
View(allcod)
allcod
load("~/GitHub/Code/BARDENA/paquetes_R/Comorbilidades/data/dicod.rda")
View(dicod)
View(mapeado2)
load("~/GitHub/Code/BARDENA/paquetes_R/Comorbilidades/mapeado.rda")
View(mapeado2)
tricod[["chf"]]
library(stringr)
print (i)
for (i in tricod){
print (i)
}
for (i in tricod){
print (i)
print(name(i))
}
View(tricod)
colname(tricod)
colnames(tricod)
names(tricod)
for (i in tricod){
print (i)
print(names(i))
}
print(names(tricod))
for (i in tricod){
print (i)
print(names(tricod))
}
ciclo=0
for (i in tricod){
ciclo=ciclo++
print (i)
names(tricod)[ciclo]
}
ciclo=0
for (i in tricod){
ciclo=ciclo+1
print (i)
names(tricod)[ciclo]
}
names(tricod)[ciclo]
ciclo=0
for (i in tricod){
ciclo=ciclo+1
print (i)
cat(names(tricod)[ciclo])
}
ciclo=0
for (i in tricod){
cat(names(tricod)[ciclo])
ciclo=ciclo+1
print (i)
}
ciclo=0
lista=as.data.frame(matrix(NA,ncol=2))
colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista[ciclo,1]<-names(tricod)[ciclo]
list[ciclo,2]<-tricod(i)
}
View(lista)
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista2<-str_split(string=tricod(i),pattern = "|^")
listanueva<-as.data.frame(matrix(i,ncol=2,nrow=length(lista2)))
colnames(lista)<-c("enfermedad","codigo")
lista=rbind(lista,listanueva)
}
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista2<-str_split(string=i),pattern = "|^")
listanueva<-as.data.frame(matrix(i,ncol=2,nrow=length(lista2)))
colnames(lista)<-c("enfermedad","codigo")
lista=rbind(lista,listanueva)
}
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista2<-str_split(string=i),pattern = "|^")
listanueva<-as.data.frame(matrix(i,ncol=2,nrow=length(lista2)))
colnames(lista)<-c("enfermedad","codigo")
lista=rbind(lista,listanueva)
}
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista2<-str_split(string=i,pattern = "|^")
listanueva<-as.data.frame(matrix(i,ncol=2,nrow=length(lista2)))
colnames(lista)<-c("enfermedad","codigo")
lista=rbind(lista,listanueva)
}
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
lista<-as.data.frame(matrix(i,ncol=2))
for (i in tricod){
ciclo=ciclo+1
lista2<-str_split(string=i,pattern = "|^")
listanueva<-as.data.frame(matrix(i,ncol=2,nrow=length(lista2)))
colnames(listanueva)<-c("enfermedad","codigo")
lista=rbind(lista,listanueva)
}
View(lista)
View(listanueva)
View(lista2)
as.data.frame(matrix(i,ncol=2,nrow=length(lista2)))
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
lista<-as.data.frame(matrix(i,ncol=2))
colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista2<-str_split(string=i,pattern = "|^")
listanueva<-as.data.frame(matrix(names(tricod)[ciclo],ncol=2,nrow=length(lista2)))
colnames(listanueva)<-c("enfermedad","codigo")
listanueva[,2]<-lista2
lista=rbind(lista,listanueva)
}
View(lista)
View(listanueva)
View(lista)
lista2
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
lista<-as.data.frame(matrix(i,ncol=2))
colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista2<-str_split(string=i,pattern = "(|^)")
listanueva<-as.data.frame(matrix(names(tricod)[ciclo],ncol=2,nrow=length(lista2)))
colnames(listanueva)<-c("enfermedad","codigo")
listanueva[,2]<-lista2
lista=rbind(lista,listanueva)
}
View(lista)
str_split(string=i,pattern = "(|^)")
i
str_split(string=i,pattern = "(\|^)")
str_split(string=i,pattern = "(\\|^)")
gsub(string=i,pattern = pattern = :symbol:))
gsub(string=i,pattern =  :symbol:))
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
lista<-as.data.frame(matrix(i,ncol=2))
colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista2<-str_split(string=i,pattern = "[:punt:]")
listanueva<-as.data.frame(matrix(names(tricod)[ciclo],ncol=2,nrow=length(lista2)))
colnames(listanueva)<-c("enfermedad","codigo")
listanueva[,2]<-lista2
lista=rbind(lista,listanueva)
}
gsub(string=i,pattern = "[:punt:]")
gsub(x = i,pattern = "[:punt:]")
gsub(x = i,pattern = "[:punt:]",replacement = " ")
library(stringr)
gsub(x = i,pattern = "[:punt:]",replacement = " ")
gsub(x = i,pattern = "|",replacement = " ")
gsub(x = i,pattern = "/|",replacement = " ")
gsub(x = i,pattern = "//|",replacement = " ")
gsub(x = i,pattern = "\|",replacement = " ")
gsub(x = i,pattern = "\\|",replacement = " ")
gsub(x = i,pattern = "\\|^",replacement = " ")
gsub(x = i,pattern = "\\|\\^",replacement = " ")
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
lista<-as.data.frame(matrix(i,ncol=2))
colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista2<-gsub(x = i,pattern = "\\|\\^",replacement = " ")
listanueva<-as.data.frame(matrix(names(tricod)[ciclo],ncol=2,nrow=length(lista2)))
colnames(listanueva)<-c("enfermedad","codigo")
listanueva[,2]<-lista2
lista=rbind(lista,listanueva)
}
View(lista)
rm(lista)
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
lista<-as.data.frame(matrix(i,ncol=2))
colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista2<-gsub(x = i,pattern = "\\|\\^",replacement = " ")
listanueva<-as.data.frame(matrix(names(tricod)[ciclo],ncol=2,nrow=length(lista2)))
colnames(listanueva)<-c("enfermedad","codigo")
listanueva[,2]<-lista2
lista=rbind(lista,listanueva)
}
View(lista)
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
lista<-as.data.frame(matrix(i,ncol=2))
colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista2<-gsub(x = i,pattern = "\\|\\^",replacement = " ")
lista2<-str_split(string = lista2,pattern = " ")
listanueva<-as.data.frame(matrix(names(tricod)[ciclo],ncol=2,nrow=length(lista2)))
colnames(listanueva)<-c("enfermedad","codigo")
listanueva[,2]<-lista2
lista=rbind(lista,listanueva)
}
View(lista)
lista2
lista[,2]<-lista2
as.data.frame(matrix(names(tricod)[ciclo],ncol=2,nrow=length(lista2)))
length(lista2)
lista2
dim(lista2)
length(lista2)
str(lista2)
unlist(str_split(string = lista2,pattern = " "))
unlist(lista2)
ciclo=0
# lista=as.data.frame(matrix(NA,ncol=2))
# colnames(lista)<-c("enfermedad","codigo")
lista<-as.data.frame(matrix(i,ncol=2))
colnames(lista)<-c("enfermedad","codigo")
for (i in tricod){
ciclo=ciclo+1
lista2<-gsub(x = i,pattern = "\\|\\^",replacement = " ")
lista2<-str_split(string = lista2,pattern = " ")
lista2<-unlist(lista2)
listanueva<-as.data.frame(matrix(names(tricod)[ciclo],ncol=2,nrow=length(lista2)))
colnames(listanueva)<-c("enfermedad","codigo")
listanueva[,2]<-lista2
lista=rbind(lista,listanueva)
}
View(lista)
lista[-1,]
save(lista[-1,],"codigos.rda")
save(list = lista[-1,],file = "codigos.rda")
save(lista[-1,],file = "codigos.rda")
lista11<-lista[-1,]
save(lista11,file = "codigos.rda")
load("~/GitHub/BARDENA/paquetes_R/Comorbilidades/codigos.rda")
View(lista11)
load("~/GitHub/BARDENA/paquetes_R/Comorbilidades/data/dicod.rda")
View(dicod)
>>>>>>> cbc09ca4609067d80b433a81eb5121593a345fc7
